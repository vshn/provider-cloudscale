package v1

import (
	"reflect"

	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	"github.com/crossplane/crossplane-runtime/pkg/meta"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// ObjectsUserParameters are the configurable fields of an ObjectsUser.
type ObjectsUserParameters struct {
	// DisplayName is the name of the objects user as presented in the cloudscale.ch UI.
	// If empty, the value of `.metadata.annotations."crossplane.io/external-name"` is used.
	// There can be multiple users that have the same display name in cloudscale.ch, but they will have different user IDs.
	DisplayName string `json:"displayName,omitempty"`

	// Tags contain additional key-value information of an ObjectsUser.
	// If this map is empty, existing tags will be removed.
	Tags Tags `json:"tags,omitempty"`
}

// ObjectsUserSpec defines the desired state of an ObjectsUser.
type ObjectsUserSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ProviderReference *xpv1.Reference       `json:"providerReference,omitempty"`
	ForProvider       ObjectsUserParameters `json:"forProvider"`
}

// ObjectsUserStatus represents the observed state of a ObjectsUser.
type ObjectsUserStatus struct {
	xpv1.ResourceStatus `json:",inline"`

	AtProvider ObjectsUserObservation `json:"atProvider,omitempty"`
}

// ObjectsUserObservation contains the observed fields of an ObjectsUser.
type ObjectsUserObservation struct {
	// UserID is the unique ID as generated by cloudscale.ch.
	UserID string `json:"userID,omitempty"`
	// Tags contains the key-value map as observed in cloudscale.ch
	Tags Tags `json:"tags,omitempty"`
	// DisplayName is the observed name of the ObjectsUser.
	DisplayName string `json:"displayName,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:printcolumn:name="Ready",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="Synced",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="External Name",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:printcolumn:name="User ID",type="string",JSONPath=".status.atProvider.userID"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,cloudscale}

// ObjectsUser is the API for creating S3 Objects users on cloudscale.ch.
type ObjectsUser struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   ObjectsUserSpec   `json:"spec"`
	Status ObjectsUserStatus `json:"status,omitempty"`
}

// GetDisplayName returns the ObjectsUser display name in the following precedence:
//
//	.spec.forProvider.displayName
//	.metadata.annotations."crossplane.io/external-name"
//	.metadata.name
func (in *ObjectsUser) GetDisplayName() string {
	if in.Spec.ForProvider.DisplayName != "" {
		return in.Spec.ForProvider.DisplayName
	}
	if name := meta.GetExternalName(in); name != "" {
		return name
	}
	return in.Name
}

// +kubebuilder:object:root=true

// ObjectsUserList contains a list of ObjectsUser
type ObjectsUserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ObjectsUser `json:"items"`
}

// ObjectsUser type metadata.
var (
	ObjectsUserKind             = reflect.TypeOf(ObjectsUser{}).Name()
	ObjectsUserGroupKind        = schema.GroupKind{Group: Group, Kind: ObjectsUserKind}.String()
	ObjectsUserKindAPIVersion   = ObjectsUserKind + "." + SchemeGroupVersion.String()
	ObjectsUserGroupVersionKind = SchemeGroupVersion.WithKind(ObjectsUserKind)
)

func init() {
	SchemeBuilder.Register(&ObjectsUser{}, &ObjectsUserList{})
}
